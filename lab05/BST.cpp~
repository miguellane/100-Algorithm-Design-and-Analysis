#include <iostream>
#include <string>
#include "BST.h"

using namespace std;

/****************************************************************
 * CONSTRUCTOR
 *   Creates an empty binary tree
 ****************************************************************/
BST::BST() {
  root = NULL;
}

/****************************************************************
 * DESTRUCTOR
 *   Free all memory used by current tree
 ****************************************************************/
BST::~BST() {
  DestroyBranch(root);
  root = NULL;
}

void BST::Insert(int toInsert) {
  if(root == NULL){
    root = new Node;
    root->val = toInsert;
    root->parent = NULL;
    root->left = NULL;
    root->right = NULL;
  }else{
    InsertNode(toInsert,root);
  }
}
void BST::InsertNode(int toInsert, Node *node) {
  if(node->val > toInsert){
    if(node->left != NULL){
      InsertNode(toInsert,node->left);
    }else{
      node->left = new Node;
      node->left->val = toInsert;
      node->left->left = NULL;
      node->left->right = NULL;
      node->left->parent = node;
    }
  }else{
    if(node->right != NULL){
      InsertNode(toInsert,node->right);
    }else{
      node->right = new Node;
      node->right->val = toInsert;
      node->right->left = NULL;
      node->right->right = NULL;
      node->right->parent = node;
    }
  }
}
void BST::DestroyBranch(Node *node) {
  if(node != NULL){
    DestroyBranch(node->left);
    DestroyBranch(node->right);
//    if(node == node->parent->left)
//      node->parent->left = NULL;
//    if(node == node->parent->right)
//      node->parent->right = NULL;
    delete node;
  }
}
void BST::Delete(int toDelete) {
  Node* found = Search(toDelete);
  Node* succ = Successor(found);
  cout<< found->val <<":::"<<succ->val<<endl;
  if(succ != NULL){
   if(found->left != succ && found->left != NULL)
     succ->left = found->left;
   if(found->right != succ && found->right != NULL)
     succ->right = found->right;
   succ->parent = found->parent;
  }
  if(found == found->parent->left)
    found->parent->left = succ;
  if(found == found->parent->right)
    found->parent->right = succ;

  delete found;
}
void BST::Transplant(Node *u, Node *v) {
  if(u != NULL && v != NULL){
    if(u == u->parent->left)
     u->parent->left = v;
    if(u == u->parent->right)
     u->parent->right = v;
    if(v == v->parent->left)
     v->parent->left = u;
    if(v == v->parent->right)
     v->parent->right = u;
  }
}
Node *BST::Successor(Node *x) {
  if(x != NULL){
    if(x->right != NULL)
      return Minimum(x->right);
    if(x->left != NULL)
      return x->left;  
  }
  return NULL;
}
Node *BST::Minimum(Node *x) {
  if(x != NULL){
    if(x->left == NULL)
      return x;
    else
      return Minimum(x->left);
  }
}
Node *BST::Maximum(Node *x) {
  if(x != NULL){
    if(x->right == NULL)
      return x;
    else
      return Maximum(x->right);
  }
}
Node *BST::Search(int toFind) {
  if(root != NULL){
    return SearchHelp(toFind, root);
  }
}
Node *BST::SearchHelp(int toFind,Node *node) {
  if(node == NULL)
    return NULL;
  
  if(toFind == node->val){
    return node;  
  }else if(toFind < node->val){
    SearchHelp(toFind,node->left);
  }else{
    SearchHelp(toFind,node->right);
  }
}
void BST::Print(TraversalOrder Order) {
  if(Order==InOrderTrav)
    InOrder(root);
  else if(Order==PreOrderTrav)
    PreOrder(root);
  else if(Order==PostOrderTrav)
    PostOrder(root);
}
void BST::PreOrder(Node *x) {
  if(x != NULL){
    cout<< x->val <<endl;
    PreOrder(x->left);
    PreOrder(x->right);
  }
}
void BST::InOrder(Node *x) {
  if(x != NULL){
    InOrder(x->left);
    cout<< x->val <<endl;
    InOrder(x->right);
  }
}
void BST::PostOrder(Node *x) {
  if(x != NULL){
    PostOrder(x->left);
    PostOrder(x->right);
    cout<< x->val <<endl;
  }
}
